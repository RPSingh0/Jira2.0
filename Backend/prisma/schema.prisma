generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  firstName         String   @db.VarChar(30)
  lastName          String   @db.VarChar(30)
  email             String   @unique @db.VarChar(100)
  profileImage      String
  status            Boolean  @default(true)
  password          String
  passwordChangedAt String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // References
  projectsLead     Project[]
  metadataAssignee Metadata[]       @relation("UserAssignee")
  metadataReporter Metadata[]       @relation("UserReporter")
  projectComments  ProjectComment[]
  featureComments  FeatureComment[]
  jiraComments     JiraComment[]
}

model Project {
  id            String   @id @default(uuid())
  name          String   @db.VarChar(100)
  projectKey    String   @unique @db.VarChar(30)
  description   String
  projectLeadBy String   @db.VarChar(100)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // References
  lead     User             @relation(fields: [projectLeadBy], references: [email])
  features Feature[]
  metadata Metadata[]
  comments ProjectComment[]
}

model Feature {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  featureKey  String   @db.VarChar(30)
  description String
  projectKey  String   @db.VarChar(30)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // References
  project  Project          @relation(fields: [projectKey], references: [projectKey])
  metadata Metadata[]
  comments FeatureComment[]

  // Index
  @@unique([projectKey, featureKey])
}

model Jira {
  id          String   @id @default(uuid())
  summary     String   @db.VarChar(256)
  jiraKey     String   @unique @db.VarChar(30)
  jiraType    JiraType
  description String
  jiraLink    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // References
  metadata Metadata?
  comments JiraComment[]
}

model Metadata {
  id         String     @id @default(uuid())
  jiraKey    String     @unique @db.VarChar(30)
  jiraPoint  Int
  projectKey String     @db.VarChar(30)
  featureKey String     @db.VarChar(30)
  assignee   String     @db.VarChar(100)
  reporter   String     @db.VarChar(100)
  status     JiraStatus @default(NEW)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // References
  jira         Jira    @relation(fields: [jiraKey], references: [jiraKey])
  project      Project @relation(fields: [projectKey], references: [projectKey])
  feature      Feature @relation(fields: [projectKey, featureKey], references: [projectKey, featureKey])
  UserAssignee User    @relation("UserAssignee", fields: [assignee], references: [email])
  UserReporter User    @relation("UserReporter", fields: [reporter], references: [email])
}

model ProjectComment {
  id          String   @id @default(uuid())
  content     String
  projectKey  String   @db.VarChar(30)
  authorEmail String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // References
  project Project @relation(fields: [projectKey], references: [projectKey])
  author  User    @relation(fields: [authorEmail], references: [email])
}

model FeatureComment {
  id          String   @id @default(uuid())
  content     String
  projectKey  String   @db.VarChar(30)
  featureKey  String   @db.VarChar(30)
  authorEmail String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // References
  feature Feature @relation(fields: [projectKey, featureKey], references: [projectKey, featureKey])
  author  User    @relation(fields: [authorEmail], references: [email])
}

model JiraComment {
  id          String   @id @default(uuid())
  content     String
  jiraKey     String   @db.VarChar(30)
  authorEmail String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // References
  jira   Jira @relation(fields: [jiraKey], references: [jiraKey])
  author User @relation(fields: [authorEmail], references: [email])
}

enum JiraType {
  STORY
  BUG
  TASK
}

enum JiraStatus {
  NEW
  INPROGRESS
  NEEDSINFO
  BLOCKED
  DONE
}
